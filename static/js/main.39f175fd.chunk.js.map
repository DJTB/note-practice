{"version":3,"sources":["consts.ts","components/Notes.tsx","components/Settings/Filter.tsx","components/Settings/Timer.tsx","components/Settings/Count.tsx","components/Settings/index.tsx","utils/omitBy.ts","utils/shuffle.ts","utils/noteHelpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NOTE_COLORS","A","B","C","D","E","F","G","NOTE_FILTERS","label","value","Notes","notes","className","map","note","index","letter","mod","color","key","Note","textColor","wrapperClasses","modStyle","lineHeight","top","fontSize","style","flexBasis","Filter","onChange","TextField","id","select","filter","MenuItem","Timer","inputRef","useRef","useState","setValue","handleChange","useCallback","ev","num","parseInt","target","newVal","handleBlur","val","Number","isFinite","ref","size","type","onBlur","Count","max","lastValidValue","newValue","current","Settings","memo","count","setTimerDelay","setCount","setFilter","changeNotes","maxNoteCount","handleDelayChange","timerDelay","parseDelay","handleCountChange","handleFilterChange","omitBy","arr","ignores","a","every","b","shuffle","m","length","i","Math","floor","random","NATURAL_NOTES","SHARP_NOTES","FLAT_NOTES","INVERSION_GROUPS","getNaturalSet","getSharpSet","getFlatSet","getNoteSet","getNotes","some","Array","isArray","flatMap","g","slice","App","windowSize","useWindowSize","setNotes","overrides","handleTap","useEffect","useInterval","height","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAUaA,EAAc,CACzBC,EAAG,OACHC,EAAG,SACHC,EAAG,MACHC,EAAG,SACHC,EAAG,SACHC,EAAG,QACHC,EAAG,QAGQC,EAA0D,CACrE,CAAEC,MAAO,YAAaC,MAAO,OAC7B,CAAED,MAAO,gBAAiBC,MAAO,YACjC,CAAED,MAAO,oBAAqBC,MAAO,UACrC,CAAED,MAAO,mBAAoBC,MAAO,SACpC,CAAED,MAAO,mBAAoBC,MAAO,eCpBzBC,EAAiC,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,EAChE,OACE,yBAAKC,UAAU,mEACZD,EAAME,KAAI,SAACC,EAAMC,GAChB,IAAMC,EAASF,EAAK,GACdG,EAAMH,EAAK,GACXI,EAAQnB,EAAYiB,GAE1B,OAAO,kBAAC,EAAD,CAAMG,IAAKL,EAAOC,EAAOC,OAAQA,EAAQC,IAAKA,EAAKC,MAAOA,SAM5DE,EAIR,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MACbG,EAAS,eAAWH,EAAX,QACTI,EAAc,mEAA+DD,GAE7EE,EAAW,CAAEC,WAAY,UAAWC,IAAK,EAAGC,SAAU,SAG5D,OACE,yBAAKd,UAAWU,EAAgBK,MALb,CAAEC,UAAW,SAM9B,yBAAKhB,UAAU,YAAYe,MAAOJ,GAC/BN,GAEH,8BAAOD,GACP,yBAAKJ,UAAWK,EAAM,GAAK,YAAaU,MAAK,eAAOJ,IACjDN,K,gBC/BIY,EAGR,SAAC,GAAD,IAAGpB,EAAH,EAAGA,MAAOqB,EAAV,EAAUA,SAAV,OACH,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHpB,UAAU,OACVJ,MAAM,UACNyB,QAAM,EACNxB,MAAOA,EACPqB,SAAUA,GAETvB,EAAaM,KAAI,SAACqB,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAUhB,IAAKe,EAAOzB,MAAOA,MAAOyB,EAAOzB,OACxCyB,EAAO1B,YCfH4B,EAER,SAAC,GAAkB,IAAhBN,EAAe,EAAfA,SACAO,EAAWC,iBAAyB,MADrB,EAMKC,mBAAS,KANd,mBAMd9B,EANc,KAMP+B,EANO,KAQfC,EAAeC,uBACnB,SAACC,GACC,IAAMC,EAAMC,SAASF,EAAGG,OAAOrC,OAC3BsC,EAASJ,EAAGG,OAAOrC,MAEnBmC,EAAM,EACRG,EAAS,IACAH,EHdgB,KGezBG,EAAM,UHfmB,KGkB3BP,EAASO,GACTjB,EAASa,KAEX,CAACb,EAAUU,IAGPQ,EAAaN,uBACjB,SAACC,GACC,IAAMM,EAAMN,EAAGG,OAAOrC,MAChBmC,EAAMC,SAASI,GAGhBC,OAAOC,SAASP,GAGnBJ,EAASS,GAFTT,EAAS,KAKXV,EAASa,KAEX,CAACb,EAAUU,IAGb,OACE,oCACE,kBAACT,EAAA,EAAD,CACEC,GAAG,aACHpB,UAAU,YACVwC,IAAKf,EACL7B,MAAM,QACN6C,KAAK,QACLC,KAAK,SACL7C,MAAOA,EACPqB,SAAUW,EACVc,OAAQP,MCxDHQ,EAIR,SAAC,GAA8B,IAA5B/C,EAA2B,EAA3BA,MAAOgD,EAAoB,EAApBA,IAAK3B,EAAe,EAAfA,SACZO,EAAWC,iBAAyB,MACpCoB,EAAiBpB,iBJRU,IIU3BG,EAAeC,uBACnB,SAACC,GACC,IAAIgB,EAAWhB,EAAGG,OAAOrC,MACnBmC,EAAMC,SAASF,EAAGG,OAAOrC,OAE3BmC,GAAO,EACTe,EAAW,IACFf,EAAMa,IACfE,EAAQ,UAAMF,IAIZP,OAAOC,SAASP,KAClBc,EAAeE,QAAUD,GAI3BhB,EAAGG,OAAOrC,MAAQkD,EAClB7B,EAASa,KAEX,CAACc,EAAK3B,IAGFkB,EAAaN,uBACjB,SAACC,GAEMO,OAAOC,SAASR,EAAGG,OAAOrC,SAC7BkC,EAAGG,OAAOrC,MAAQiD,EAAeE,SAGnC9B,EAASa,KAEX,CAACb,IAGH,OACE,kBAACC,EAAA,EAAD,CACEC,GAAG,aACHpB,UAAU,YACVwC,IAAKf,EACL7B,MAAM,QACN8C,KAAK,SACL7C,MAAOA,EACP4C,KAAK,QACLvB,SAAUW,EACVc,OAAQP,KCzCDa,EAORC,gBAAK,YAAyE,IAAtE5B,EAAqE,EAArEA,OAAQ6B,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YACxDC,EAA0B,aAAXlC,ELrBY,EACJ,GKsBvBmC,EAAoB3B,uBACxB,YAAiB,IAAdI,EAAa,EAAbA,OACDkB,EAlBa,SAACM,GAClB,IAAMrB,EAAMJ,SAASyB,GAErB,OADqBpB,OAAOC,SAASF,IAAQA,GAAO,EAC/B,KAAa,IAANA,EAeVsB,CAAWzB,EAAOrC,UAElC,CAACuD,IAGGQ,EAAoB9B,uBACxB,YAAiB,IACTqB,EADQ,EAAbjB,OACoBrC,MACrBwD,EAASF,GACTI,EAAY,CAAEJ,YAEhB,CAACE,EAAUE,IAGPM,EAAqB/B,uBACzB,YAAiB,IACTR,EADQ,EAAbY,OACqBrC,MACtByD,EAAUhC,GACViC,EAAY,CAAEjC,aAEhB,CAACgC,EAAWC,IAGd,OACE,oCACE,yBAAKvD,UAAU,6CACb,kBAAC,EAAD,CAAQH,MAAOyB,EAAQJ,SAAU2C,KAEnC,yBAAK7D,UAAU,6BACb,kBAAC,EAAD,CAAOkB,SAAUuC,KAEnB,yBAAKzD,UAAU,2CACb,kBAAC,EAAD,CAAOH,MAAOsD,EAAON,IAAKW,EAActC,SAAU0C,S,QC5D7CE,EAAS,SAACC,EAAeC,GAAhB,OACpBD,EAAIzC,QAAO,SAAC2C,GAAD,OAAOD,EAAQE,OAAM,SAACC,GAAD,OAAOF,IAAME,S,QCAlCC,EAAU,SAAC,GAGtB,IAHoC,IAAVL,EAAS,wBAC/BM,EAAIN,EAAIO,OAELD,GAAG,CACR,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,KAD7B,EAEW,CAACN,EAAIQ,GAAIR,EAAIM,IAA/BN,EAAIM,GAFG,KAECN,EAAIQ,GAFL,KAKV,OAAOR,GCIHY,EAA8B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7DC,EAAcd,EAAOa,EAAe,CAAC,IAAK,MAAM1E,KAAI,SAACC,GAAD,OAAUA,EAAO,YACrE2E,EAAaf,EAAOa,EAAe,CAAC,IAAK,MAAM1E,KAAI,SAACC,GAAD,OAAUA,EAAO,YAEpE4E,EAAmB,CACvB,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,KAAM,KAAM,MACb,CAAC,IAAK,KAAM,OAGDC,EAAgB,2BAAUJ,IAC1BK,EAAc,uCAAUD,KAAV,YAA8BH,KAC5CK,EAAa,uCAAUF,KAAV,YAA8BF,KAM3CK,EAAa,SAAC3E,GACzB,OAAQA,GACN,IAAK,MACH,OAL6BiE,KAAKE,SAAW,GAAMM,IAAgBC,IAMrE,IAAK,WACH,OAAOF,IACT,IAAK,SACH,OAAOC,IACT,IAAK,QACH,OAAOC,IACT,IAAK,aACH,MAf0B,UAAUH,KAmB7BK,EAAW,WAAkE,IAAD,yDAAjB,GAAiB,IAA9D7D,cAA8D,MAArD,MAAqD,MAA9C6B,aAA8C,MAAtC,EAAsC,EACnFpD,EAAQqE,EAAQc,EAAW5D,IAO/B,OAJIvB,EAAMqF,KAAKC,MAAMC,WACnBvF,EAAQA,EAAMwF,SAAQ,SAACC,GAAD,OAAOpB,EAAQoB,OAGhCzF,EAAM0F,MAAM,EAAGtC,ICOTuC,EArDH,WACV,IAAMC,EAAaC,cADH,EAEUjE,mBTTO,ISOjB,mBAETwB,EAFS,KAEFE,EAFE,OAGY1B,mBTNqB,OSGjC,mBAGTL,EAHS,KAGDgC,EAHC,OAIU3B,mBAASwD,EAAS,CAAE7D,SAAQ6B,WAJtC,mBAITpD,EAJS,KAIF8F,EAJE,OAOoBlE,mBAAwB,MAP5C,mBAOT+B,EAPS,KAOGN,EAPH,KASVG,EAAczB,uBAClB,eAACgE,EAAD,uDAAa,GAAb,OAAoBD,EAASV,EAAS,aAAE7D,SAAQ6B,SAAU2C,OAC1D,CAACxE,EAAQ6B,EAAO0C,IAGZE,EAAYjE,uBAAY,WACT,OAAf4B,GAEFN,EAAcM,EAAa,GAE7BH,MACC,CAACA,EAAaG,EAAYN,IAW7B,OARA4C,qBAAU,WACO,aAAX1E,GAAyB6B,ET9BE,GS+B7BE,ET/B6B,KSiC9B,CAAC/B,EAAQ6B,IAEZ8C,YAAY1C,EAAaG,GAGvB,yBAAK1D,UAAU,4BAA4Be,MAAO,CAAEmF,OAAQP,EAAWO,SACrE,yBAAKlG,UAAU,kDAAkDmG,QAASJ,GACxE,kBAAC,EAAD,CAAOhG,MAAOA,KAEhB,yBAAKC,UAAU,4DAAf,+BAGA,yBAAKA,UAAU,wEACb,kBAACiD,EAAD,CACEE,MAAOA,EACP7B,OAAQA,EACRgC,UAAWA,EACXF,cAAeA,EACfC,SAAUA,EACVE,YAAaA,OCtCH6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39f175fd.chunk.js","sourcesContent":["import { NoteSetFilter } from './utils/noteHelpers';\n\nexport const DEFAULT_NOTES_COUNT = 12;\nexport const NATURAL_NOTES_COUNT = 7;\nexport const MAX_NOTES_COUNT = 12;\n\nexport const DEFAULT_NOTES_FILTER: NoteSetFilter = 'any';\n\nexport const TIMER_MAX_SECONDS = 60;\n\nexport const NOTE_COLORS = {\n  A: 'blue',\n  B: 'purple',\n  C: 'red',\n  D: 'yellow',\n  E: 'orange',\n  F: 'green',\n  G: 'teal',\n} as const;\n\nexport const NOTE_FILTERS: { label: string; value: NoteSetFilter }[] = [\n  { label: 'All Notes', value: 'any' },\n  { label: 'Naturals Only', value: 'naturals' },\n  { label: 'Naturals + Sharps', value: 'sharps' },\n  { label: 'Naturals + Flats', value: 'flats' },\n  { label: 'Inversion Groups', value: 'inversions' },\n];\n","import React, { FC } from 'react';\n\nimport { NOTE_COLORS } from '../consts';\nimport type { NoteLetter, NoteMod } from '../utils/noteHelpers';\n\nexport const Notes: FC<{ notes: string[] }> = ({ notes = [] }) => {\n  return (\n    <div className=\"flex flex-wrap items-center content-center justify-center gap-4\">\n      {notes.map((note, index) => {\n        const letter = note[0] as NoteLetter;\n        const mod = note[1] as NoteMod | undefined;\n        const color = NOTE_COLORS[letter];\n\n        return <Note key={note + index} letter={letter} mod={mod} color={color} />;\n      })}\n    </div>\n  );\n};\n\nexport const Note: FC<{\n  letter: NoteLetter;\n  mod: NoteMod | undefined;\n  color: string;\n}> = ({ letter, mod, color }) => {\n  const textColor = `text-${color}-400`;\n  const wrapperClasses = `inline-flex content-center justify-center text-auto-size ${textColor}`;\n  const wrapperStyle = { flexBasis: '10vw' };\n  const modStyle = { lineHeight: 'inherit', top: 0, fontSize: '0.5em' };\n\n  /* we render 2 mods to ensure perfect spacing, but only show the right one when relevant */\n  return (\n    <div className={wrapperClasses} style={wrapperStyle}>\n      <sup className=\"invisible\" style={modStyle}>\n        {mod}\n      </sup>\n      <span>{letter}</span>\n      <sup className={mod ? '' : 'invisible'} style={{ ...modStyle }}>\n        {mod}\n      </sup>\n    </div>\n  );\n};\n","import React, { ChangeEventHandler, FC } from 'react';\nimport { MenuItem, TextField } from '@material-ui/core';\n\nimport { NOTE_FILTERS } from '../../consts';\nimport { NoteSetFilter } from '../../utils/noteHelpers';\n\nexport const Filter: FC<{\n  value: NoteSetFilter;\n  onChange: ChangeEventHandler;\n}> = ({ value, onChange }) => (\n  <TextField\n    id=\"note-filter\"\n    className=\"px-1\"\n    label=\"Display\"\n    select\n    value={value}\n    onChange={onChange}\n  >\n    {NOTE_FILTERS.map((filter) => (\n      <MenuItem key={filter.value} value={filter.value}>\n        {filter.label}\n      </MenuItem>\n    ))}\n  </TextField>\n);\n","import React, { ChangeEventHandler, FC, useRef, useState, useCallback } from 'react';\nimport { TextField } from '@material-ui/core';\n\nimport { TIMER_MAX_SECONDS } from '../../consts';\n\nexport const Timer: FC<{\n  onChange: ChangeEventHandler;\n}> = ({ onChange }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  // track input val internally (but still broadcast change)\n  // otherwise we can get stuck with a `0` on mobile\n  // that cannot be deleted for fresh input due\n  // to null being used as delay value for useInterval\n  const [value, setValue] = useState('0');\n\n  const handleChange = useCallback(\n    (ev) => {\n      const num = parseInt(ev.target.value);\n      let newVal = ev.target.value;\n\n      if (num < 0) {\n        newVal = '0';\n      } else if (num > TIMER_MAX_SECONDS) {\n        newVal = `${TIMER_MAX_SECONDS}`;\n      }\n\n      setValue(newVal);\n      onChange(ev);\n    },\n    [onChange, setValue]\n  );\n\n  const handleBlur = useCallback(\n    (ev) => {\n      const val = ev.target.value;\n      const num = parseInt(val);\n\n      // empty input, reset to 0\n      if (!Number.isFinite(num)) {\n        setValue('0');\n      } else {\n        setValue(val);\n      }\n\n      onChange(ev);\n    },\n    [onChange, setValue]\n  );\n\n  return (\n    <>\n      <TextField\n        id=\"note-timer\"\n        className=\"w-16 px-1\"\n        ref={inputRef}\n        label=\"Timer\"\n        size=\"small\"\n        type=\"number\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n    </>\n  );\n};\n","import React, { ChangeEventHandler, FC, useCallback, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { DEFAULT_NOTES_COUNT } from '../../consts';\n\nexport const Count: FC<{\n  value: number;\n  max: number;\n  onChange: ChangeEventHandler;\n}> = ({ value, max, onChange }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lastValidValue = useRef(DEFAULT_NOTES_COUNT);\n\n  const handleChange = useCallback(\n    (ev) => {\n      let newValue = ev.target.value;\n      const num = parseInt(ev.target.value);\n\n      if (num <= 0) {\n        newValue = '1';\n      } else if (num > max) {\n        newValue = `${max}`;\n      }\n\n      // hold onto last valid value for reset in blur\n      if (Number.isFinite(num)) {\n        lastValidValue.current = newValue;\n      }\n\n      // update displayed value regardless\n      ev.target.value = newValue;\n      onChange(ev);\n    },\n    [max, onChange]\n  );\n\n  const handleBlur = useCallback(\n    (ev) => {\n      // input empty/invalid, reset to last valid value\n      if (!Number.isFinite(ev.target.value)) {\n        ev.target.value = lastValidValue.current;\n      }\n\n      onChange(ev);\n    },\n    [onChange]\n  );\n\n  return (\n    <TextField\n      id=\"note-count\"\n      className=\"w-10 px-1\"\n      ref={inputRef}\n      label=\"Count\"\n      type=\"number\"\n      value={value}\n      size=\"small\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n","import React, { useCallback, Dispatch, SetStateAction, FC, memo } from 'react';\n\nimport { Filter } from './Filter';\nimport { Timer } from './Timer';\nimport { Count } from './Count';\n\nimport { NoteSetFilter } from '../../utils/noteHelpers';\nimport { NATURAL_NOTES_COUNT, MAX_NOTES_COUNT } from '../../consts';\n\n// seconds -> ms | null\nconst parseDelay = (timerDelay: string): number | null => {\n  const val = parseInt(timerDelay);\n  const shouldReset = !Number.isFinite(val) || val <= 0;\n  return shouldReset ? null : val * 1000;\n};\n\nexport const Settings: FC<{\n  filter: NoteSetFilter;\n  count: number;\n  setTimerDelay: Dispatch<SetStateAction<number | null>>;\n  setCount: Dispatch<SetStateAction<number>>;\n  setFilter: Dispatch<SetStateAction<NoteSetFilter>>;\n  changeNotes: (overrides?: { filter?: number; count?: number }) => void;\n}> = memo(({ filter, count, setTimerDelay, setCount, setFilter, changeNotes }) => {\n  const maxNoteCount = filter === 'naturals' ? NATURAL_NOTES_COUNT : MAX_NOTES_COUNT;\n\n  const handleDelayChange = useCallback(\n    ({ target }) => {\n      setTimerDelay(parseDelay(target.value));\n    },\n    [setTimerDelay]\n  );\n\n  const handleCountChange = useCallback(\n    ({ target }) => {\n      const count = target.value;\n      setCount(count);\n      changeNotes({ count });\n    },\n    [setCount, changeNotes]\n  );\n\n  const handleFilterChange = useCallback(\n    ({ target }) => {\n      const filter = target.value;\n      setFilter(filter);\n      changeNotes({ filter });\n    },\n    [setFilter, changeNotes]\n  );\n\n  return (\n    <>\n      <div className=\"flex justify-center mb-4 md:justify-start\">\n        <Filter value={filter} onChange={handleFilterChange} />\n      </div>\n      <div className=\"flex justify-center mb-4 \">\n        <Timer onChange={handleDelayChange} />\n      </div>\n      <div className=\"flex justify-center mb-4 md:justify-end\">\n        <Count value={count} max={maxNoteCount} onChange={handleCountChange} />\n      </div>\n    </>\n  );\n});\n","export const omitBy = (arr: string[], ignores: string[]) =>\n  arr.filter((a) => ignores.every((b) => a !== b));\n","// does not mutate due to magic destructure in params ([...arr])\nexport const shuffle = ([...arr]) => {\n  let m = arr.length;\n\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n\n  return arr;\n};\n","import { omitBy } from './omitBy';\nimport { shuffle } from './shuffle';\n\nexport type NoteLetter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G';\nexport type NoteMod = '♯' | '♭';\n\nexport type NoteSetFilter = 'any' | 'naturals' | 'sharps' | 'flats' | 'inversions';\n\nexport type NoteSetConfig = {\n  filter?: NoteSetFilter;\n  count?: number;\n};\n\nconst NATURAL_NOTES: NoteLetter[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nconst SHARP_NOTES = omitBy(NATURAL_NOTES, ['B', 'E']).map((note) => note + '♯');\nconst FLAT_NOTES = omitBy(NATURAL_NOTES, ['C', 'F']).map((note) => note + '♭');\n\nconst INVERSION_GROUPS = [\n  ['C', 'F', 'G'],\n  ['A', 'D', 'E'],\n  ['Ab', 'Db', 'Eb'],\n  ['B', 'Bb', 'Gb'],\n];\n\nexport const getNaturalSet = () => [...NATURAL_NOTES];\nexport const getSharpSet = () => [...getNaturalSet(), ...SHARP_NOTES];\nexport const getFlatSet = () => [...getNaturalSet(), ...FLAT_NOTES];\n\nexport const getInversionSets = () => [...INVERSION_GROUPS];\n\nexport const getRandomSet = () => (Math.random() > 0.5 ? getSharpSet() : getFlatSet());\n\nexport const getNoteSet = (key: NoteSetFilter) => {\n  switch (key) {\n    case 'any':\n      return getRandomSet();\n    case 'naturals':\n      return getNaturalSet();\n    case 'sharps':\n      return getSharpSet();\n    case 'flats':\n      return getFlatSet();\n    case 'inversions':\n      return getInversionSets();\n  }\n};\n\nexport const getNotes = ({ filter = 'any', count = 6 }: NoteSetConfig = {}): string[] => {\n  let notes = shuffle(getNoteSet(filter));\n\n  // e.g. inversion groups\n  if (notes.some(Array.isArray)) {\n    notes = notes.flatMap((g) => shuffle(g));\n  }\n\n  return notes.slice(0, count);\n};\n","import React, { useCallback, useState, useEffect } from 'react';\nimport { useWindowSize, useInterval } from 'react-use';\n\nimport { DEFAULT_NOTES_COUNT, DEFAULT_NOTES_FILTER, NATURAL_NOTES_COUNT } from './consts';\nimport { Notes } from './components/Notes';\nimport { Settings } from './components/Settings';\n\nimport { getNotes, NoteSetFilter } from './utils/noteHelpers';\n\nconst App = () => {\n  const windowSize = useWindowSize();\n  const [count, setCount] = useState(DEFAULT_NOTES_COUNT);\n  const [filter, setFilter] = useState<NoteSetFilter>(DEFAULT_NOTES_FILTER);\n  const [notes, setNotes] = useState(getNotes({ filter, count }));\n\n  // null pauses timer\n  const [timerDelay, setTimerDelay] = useState<number | null>(null);\n\n  const changeNotes = useCallback(\n    (overrides = {}) => setNotes(getNotes({ filter, count, ...overrides })),\n    [filter, count, setNotes]\n  );\n\n  const handleTap = useCallback(() => {\n    if (timerDelay !== null) {\n      // force interval to reset by adding 1ms in case value was the same\n      setTimerDelay(timerDelay + 1);\n    }\n    changeNotes();\n  }, [changeNotes, timerDelay, setTimerDelay]);\n\n  // reduce count if filter returns less notes\n  useEffect(() => {\n    if (filter === 'naturals' && count > NATURAL_NOTES_COUNT) {\n      setCount(NATURAL_NOTES_COUNT);\n    }\n  }, [filter, count]);\n\n  useInterval(changeNotes, timerDelay);\n\n  return (\n    <div className=\"flex flex-col bg-gray-900\" style={{ height: windowSize.height }}>\n      <div className=\"flex-1 w-full max-w-6xl p-4 mx-auto select-none\" onClick={handleTap}>\n        <Notes notes={notes} />\n      </div>\n      <div className=\"my-4 text-sm italic text-center text-gray-100 opacity-25\">\n        Tap screen to refresh notes\n      </div>\n      <div className=\"grid grid-rows-3 px-4 pt-4 bg-gray-300 md:grid-cols-3 md:grid-rows-1\">\n        <Settings\n          count={count}\n          filter={filter}\n          setFilter={setFilter}\n          setTimerDelay={setTimerDelay}\n          setCount={setCount}\n          changeNotes={changeNotes}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\ntype SwConfig = {\n  onUpdate: (registration: ServiceWorkerRegistration) => void;\n  onSuccess: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config: SwConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: SwConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: SwConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}