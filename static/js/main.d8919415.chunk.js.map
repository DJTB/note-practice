{"version":3,"sources":["components/Notes.tsx","utils/omitBy.ts","utils/shuffle.ts","utils/generateNotes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","A","B","C","D","E","F","G","Note","note","letter","mod","textColor","className","style","lineHeight","top","fontSize","Notes","notes","map","n","i","key","omitBy","arr","ignores","filter","a","every","b","shuffle","m","length","Math","floor","random","NATURAL_NOTES","SHARP_NOTES","FLAT_NOTES","getNaturalSet","getSharpSet","getFlatSet","getRandomSet","getNoteSet","getRandomNoteSet","count","slice","App","useState","setCount","delay","setDelay","setFilter","setNotes","changeNotes","useCallback","overrides","changeDelay","target","parseDelay","value","changeCount","changeFilter","handleTap","useInterval","immediate","onClick","htmlFor","name","onChange","type","min","max","step","formatDelay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8919415.chunk.js","sourcesContent":["import React from 'react';\nimport type { NoteSet } from '../utils/generateNotes';\n\nconst colors: { [key: string]: string } = {\n  A: 'text-blue-400',\n  B: 'text-purple-400',\n  C: 'text-red-400',\n  D: 'text-yellow-400',\n  E: 'text-orange-400',\n  F: 'text-green-400',\n  G: 'text-teal-400',\n};\n\nexport const Note = ({ note = '' }) => {\n  const [letter, mod] = note;\n  const textColor = colors[letter];\n\n  return (\n    <div className={`flex content-center justify-center text-auto-size ${textColor}`}>\n      <span>{letter}</span>\n      {mod && <sup style={{ lineHeight: 'inherit', top: 0, fontSize: '0.5em' }}>{mod}</sup>}\n    </div>\n  );\n};\n\nexport const Notes = ({ notes = [] }: { notes: NoteSet }) => {\n  return (\n    <div className=\"flex items-center content-center justify-evenly row-wrap\">\n      {notes.map((n, i) => (\n        <Note key={n + i} note={n} />\n      ))}\n    </div>\n  );\n};\n","export const omitBy = (arr: string[], ignores: string[]) =>\n  arr.filter((a) => ignores.every((b) => a !== b));\n","export const shuffle = ([...arr]) => {\n  let m = arr.length;\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  return arr;\n};\n","import { omitBy } from './omitBy';\nimport { shuffle } from './shuffle';\n\nexport type NoteSet = string[];\nexport type NoteSetFilter = 'any' | 'naturals' | 'sharps' | 'flats';\nexport type NoteSetCount = number;\n\nexport type NoteSetConfig = {\n  filter?: NoteSetFilter;\n  count?: NoteSetCount;\n};\n\nconst NATURAL_NOTES = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nconst SHARP_NOTES = omitBy(NATURAL_NOTES, ['B', 'E']).map((note) => note + '♯');\nconst FLAT_NOTES = omitBy(NATURAL_NOTES, ['C', 'F']).map((note) => note + '♭');\n\nconst getNaturalSet = () => [...NATURAL_NOTES];\nconst getSharpSet = () => [...getNaturalSet(), ...SHARP_NOTES];\nconst getFlatSet = () => [...getNaturalSet(), ...FLAT_NOTES];\nconst getRandomSet = () => (Math.random() > 0.5 ? getSharpSet() : getFlatSet());\n\nconst getNoteSet = (key: NoteSetFilter) => {\n  switch (key) {\n    case 'any':\n      return getRandomSet();\n    case 'naturals':\n      return getNaturalSet();\n    case 'sharps':\n      return getSharpSet();\n    case 'flats':\n      return getFlatSet();\n    default:\n      return getRandomSet();\n  }\n};\nexport const getRandomNoteSet = ({ filter = 'any', count = 6 }: NoteSetConfig = {}): NoteSet => {\n  return shuffle(getNoteSet(filter)).slice(0, count);\n};\n","import React, { useCallback, useState } from 'react';\nimport { useInterval } from 'ahooks';\n\nimport './global.css';\n\nimport { Notes } from './components/Notes';\nimport { getRandomNoteSet, NoteSetFilter, NoteSetCount } from './utils/generateNotes';\n\nconst App = () => {\n  const [count, setCount] = useState<NoteSetCount>(6);\n  const [delay, setDelay] = useState<number | null>(null);\n  const [filter, setFilter] = useState<NoteSetFilter>('any');\n  const [notes, setNotes] = useState(getRandomNoteSet({ filter, count }));\n\n  const changeNotes = useCallback(\n    (overrides = {}) => setNotes(getRandomNoteSet({ filter, count, ...overrides })),\n    [filter, count, setNotes]\n  );\n\n  const parseDelay = (delay: number) => (delay === 0 ? null : delay * 1000);\n\n  const formatDelay = (delay: number | null) => {\n    if (delay === null) {\n      return 0;\n    }\n    // use floor to avoid decimal result due to 1ms addition in handleTap()\n    return Math.floor(delay / 1000);\n  };\n\n  const changeDelay = useCallback(({ target }) => setDelay(parseDelay(target.value)), [setDelay]);\n\n  const changeCount = useCallback(\n    ({ target }) => {\n      const count = target.value;\n      setCount(count);\n      changeNotes({ count });\n    },\n    [setCount, changeNotes]\n  );\n\n  const changeFilter = useCallback(\n    ({ target }) => {\n      const filter = target.value;\n      setFilter(filter);\n      changeNotes({ filter });\n    },\n    [setFilter, changeNotes]\n  );\n\n  const handleTap = useCallback(() => {\n    if (delay) {\n      // if the delay is the same we won't get a value change\n      // we'll force interval to reset by adding 1ms\n      setDelay(delay + 1);\n    } else {\n      changeNotes();\n    }\n  }, [changeNotes, delay]);\n\n  useInterval(changeNotes, delay, { immediate: true });\n\n  return (\n    <div className=\"flex flex-col flex-1\">\n      <div className=\"flex-1 w-full max-w-6xl p-4 mx-auto\" onClick={handleTap}>\n        <Notes notes={notes} />\n      </div>\n      <div className=\"pb-4 text-sm italic text-center text-gray-100 opacity-25\">\n        Tap screen to refresh notes\n      </div>\n      <div className=\"grid grid-rows-3 px-4 pt-4 bg-gray-700 md:grid-cols-3 md:grid-rows-1\">\n        <div className=\"flex justify-center mb-4 md:justify-start\">\n          <label className=\"mr-2 text-gray-400\" htmlFor=\"note-filter\">\n            Notes:\n          </label>\n          <select\n            className=\"px-1 rounded-sm\"\n            name=\"note-filter\"\n            value={filter}\n            onChange={changeFilter}\n          >\n            <option value=\"any\">Any</option>\n            <option value=\"naturals\">Naturals Only</option>\n            <option value=\"sharps\">Naturals + Sharps</option>\n            <option value=\"flats\">Naturals + Flats</option>\n          </select>\n        </div>\n        <div className=\"flex justify-center mb-4 \">\n          <label className=\"mr-2 text-gray-400\" htmlFor=\"note-timer\">\n            Refresh Timer:\n          </label>\n          <input\n            className=\"w-12 px-1 rounded-sm\"\n            name=\"note-timer\"\n            type=\"number\"\n            min={0}\n            max={60}\n            step={1}\n            value={formatDelay(delay)}\n            onChange={changeDelay}\n          />\n        </div>\n        <div className=\"flex justify-center mb-4 md:justify-end\">\n          <label className=\"mr-2 text-gray-400\" htmlFor=\"note-count\">\n            Count:\n          </label>\n          <input\n            className=\"w-10 px-1 rounded-sm\"\n            name=\"note-count\"\n            type=\"number\"\n            min={1}\n            max={12}\n            value={count}\n            onChange={changeCount}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\ntype SwConfig = {\n  onUpdate: (registration: ServiceWorkerRegistration) => void;\n  onSuccess: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config: SwConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: SwConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: SwConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}