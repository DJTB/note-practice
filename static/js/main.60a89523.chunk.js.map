{"version":3,"sources":["consts.ts","components/Notes.tsx","components/SettingsLabel.tsx","components/Filter.tsx","components/Timer.tsx","components/Count.tsx","utils/omitBy.ts","utils/shuffle.ts","utils/noteHelpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NOTE_COLORS","A","B","C","D","E","F","G","Note","note","letter","mod","textColor","className","style","lineHeight","top","fontSize","Notes","notes","map","n","i","key","SettingsLabel","name","children","htmlFor","Filter","value","onChange","Timer","type","min","max","step","Count","omitBy","arr","ignores","filter","a","every","b","shuffle","m","length","Math","floor","random","NATURAL_NOTES","SHARP_NOTES","FLAT_NOTES","getNaturalSet","getSharpSet","getFlatSet","getRandomSet","getNoteSet","getShuffledNoteSet","count","slice","formatDelay","timerDelay","parseDelay","num","parseInt","App","useState","setCount","setFilter","setNotes","setTimerDelay","changeNotes","useCallback","overrides","handleDelayChange","target","handleCountChange","handleFilterChange","handleTap","useInterval","immediate","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60a89523.chunk.js","sourcesContent":["import { NoteSetFilter } from './utils/noteHelpers';\n\nexport const DEFAULT_COUNT = 6;\nexport const DEFAULT_FILTER: NoteSetFilter = 'any';\n\nexport const NOTE_COLORS = {\n  A: 'blue',\n  B: 'purple',\n  C: 'red',\n  D: 'yellow',\n  E: 'orange',\n  F: 'green',\n  G: 'teal',\n} as const;\n","import React, { FC } from 'react';\n\nimport { NOTE_COLORS } from '../consts';\nimport type { NoteLetter, NoteMod } from '../utils/noteHelpers';\n\nexport const Note: FC<{ note: string }> = ({ note = '' }) => {\n  const letter = note[0] as NoteLetter;\n  const mod = note[1] as NoteMod | undefined;\n\n  const textColor = `text-${NOTE_COLORS[letter]}-400`;\n\n  return (\n    <div className={`flex content-center justify-center text-auto-size ${textColor}`}>\n      <span>{letter}</span>\n      {mod && <sup style={{ lineHeight: 'inherit', top: 0, fontSize: '0.5em' }}>{mod}</sup>}\n    </div>\n  );\n};\n\nexport const Notes: FC<{ notes: string[] }> = ({ notes = [] }) => {\n  return (\n    <div className=\"flex items-center content-center justify-evenly row-wrap\">\n      {notes.map((n, i) => (\n        <Note key={n + i} note={n} />\n      ))}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const SettingsLabel: FC<{ name: string }> = ({ name, children }) => (\n  <label className=\"mr-2 text-gray-400\" htmlFor={name}>\n    {children}\n  </label>\n);\n","import React, { ChangeEventHandler, FC } from 'react';\nimport { NoteSetFilter } from '../utils/noteHelpers';\nimport { SettingsLabel } from './SettingsLabel';\n\nexport const Filter: FC<{\n  value: NoteSetFilter;\n  onChange: ChangeEventHandler;\n}> = ({ value, onChange }) => (\n  <>\n    <SettingsLabel name=\"note-filter\">Notes:</SettingsLabel>\n    <select className=\"px-1 rounded-sm\" name=\"note-filter\" value={value} onChange={onChange}>\n      <option value=\"any\">Any</option>\n      <option value=\"naturals\">Naturals Only</option>\n      <option value=\"sharps\">Naturals + Sharps</option>\n      <option value=\"flats\">Naturals + Flats</option>\n    </select>\n  </>\n);\n","import React, { ChangeEventHandler, FC } from 'react';\nimport { SettingsLabel } from './SettingsLabel';\n\nexport const Timer: FC<{\n  value: number;\n  onChange: ChangeEventHandler;\n}> = ({ value, onChange }) => (\n  <>\n    <SettingsLabel name=\"note-timer\">Refresh Timer:</SettingsLabel>\n    <input\n      className=\"w-12 px-1 rounded-sm\"\n      name=\"note-timer\"\n      type=\"number\"\n      min={0}\n      max={60}\n      step={1}\n      value={value}\n      onChange={onChange}\n    />\n  </>\n);\n","import React, { ChangeEventHandler, FC } from 'react';\nimport { SettingsLabel } from './SettingsLabel';\n\nexport const Count: FC<{\n  value: number;\n  onChange: ChangeEventHandler;\n}> = ({ value, onChange }) => (\n  <>\n    <SettingsLabel name=\"note-count\">Count:</SettingsLabel>\n    <input\n      className=\"w-10 px-1 rounded-sm\"\n      name=\"note-count\"\n      type=\"number\"\n      min={1}\n      max={12}\n      value={value}\n      onChange={onChange}\n    />\n  </>\n);\n","export const omitBy = (arr: string[], ignores: string[]) =>\n  arr.filter((a) => ignores.every((b) => a !== b));\n","export const shuffle = ([...arr]) => {\n  let m = arr.length;\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  return arr;\n};\n","import { omitBy } from './omitBy';\nimport { shuffle } from './shuffle';\n\nexport type NoteLetter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G';\nexport type NoteMod = '♯' | '♭';\n\nexport type NoteSetFilter = 'any' | 'naturals' | 'sharps' | 'flats';\n\nexport type NoteSetConfig = {\n  filter?: NoteSetFilter;\n  count?: number;\n};\n\nconst NATURAL_NOTES: NoteLetter[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nconst SHARP_NOTES = omitBy(NATURAL_NOTES, ['B', 'E']).map((note) => note + '♯');\nconst FLAT_NOTES = omitBy(NATURAL_NOTES, ['C', 'F']).map((note) => note + '♭');\n\nexport const getNaturalSet = () => [...NATURAL_NOTES];\nexport const getSharpSet = () => [...getNaturalSet(), ...SHARP_NOTES];\nexport const getFlatSet = () => [...getNaturalSet(), ...FLAT_NOTES];\nexport const getRandomSet = () => (Math.random() > 0.5 ? getSharpSet() : getFlatSet());\n\nexport const getNoteSet = (key: NoteSetFilter) => {\n  switch (key) {\n    case 'any':\n      return getRandomSet();\n    case 'naturals':\n      return getNaturalSet();\n    case 'sharps':\n      return getSharpSet();\n    case 'flats':\n      return getFlatSet();\n    default:\n      return getRandomSet();\n  }\n};\n\nexport const getShuffledNoteSet = ({ filter = 'any', count = 6 }: NoteSetConfig = {}) => {\n  return shuffle(getNoteSet(filter)).slice(0, count);\n};\n","import React, { useCallback, useState } from 'react';\nimport { useInterval } from 'ahooks';\n\nimport './global.css';\n\nimport { DEFAULT_COUNT, DEFAULT_FILTER } from './consts';\nimport { Notes } from './components/Notes';\nimport { Filter } from './components/Filter';\nimport { Timer } from './components/Timer';\nimport { Count } from './components/Count';\n\nimport { getShuffledNoteSet, NoteSetFilter } from './utils/noteHelpers';\n\nconst App = () => {\n  const [count, setCount] = useState(DEFAULT_COUNT);\n  const [filter, setFilter] = useState<NoteSetFilter>(DEFAULT_FILTER);\n  const [notes, setNotes] = useState(getShuffledNoteSet({ filter, count }));\n\n  // null pauses timer\n  const [timerDelay, setTimerDelay] = useState<number | null>(null);\n\n  const changeNotes = useCallback(\n    (overrides = {}) => setNotes(getShuffledNoteSet({ filter, count, ...overrides })),\n    [filter, count, setNotes]\n  );\n\n  const handleDelayChange = useCallback(\n    ({ target }) => {\n      setTimerDelay(parseDelay(target.value));\n    },\n    [setTimerDelay]\n  );\n\n  const handleCountChange = useCallback(\n    ({ target }) => {\n      const count = target.value;\n      setCount(count);\n      changeNotes({ count });\n    },\n    [setCount, changeNotes]\n  );\n\n  const handleFilterChange = useCallback(\n    ({ target }) => {\n      const filter = target.value;\n      setFilter(filter);\n      changeNotes({ filter });\n    },\n    [setFilter, changeNotes]\n  );\n\n  const handleTap = useCallback(() => {\n    if (timerDelay !== null) {\n      // force interval to reset by adding 1ms in case value was the same\n      setTimerDelay(timerDelay + 1);\n    } else {\n      changeNotes();\n    }\n  }, [changeNotes, timerDelay, setTimerDelay]);\n\n  useInterval(changeNotes, timerDelay, { immediate: true });\n\n  return (\n    <div className=\"flex flex-col flex-1\">\n      <div className=\"flex-1 w-full max-w-6xl p-4 mx-auto select-none\" onClick={handleTap}>\n        <Notes notes={notes} />\n      </div>\n      <div className=\"my-4 text-sm italic text-center text-gray-100 opacity-25\">\n        Tap screen to refresh notes\n      </div>\n      <div className=\"grid grid-rows-3 px-4 pt-4 bg-gray-700 md:grid-cols-3 md:grid-rows-1\">\n        <div className=\"flex justify-center mb-4 md:justify-start\">\n          <Filter value={filter} onChange={handleFilterChange} />\n        </div>\n        <div className=\"flex justify-center mb-4 \">\n          <Timer value={formatDelay(timerDelay)} onChange={handleDelayChange} />\n        </div>\n        <div className=\"flex justify-center mb-4 md:justify-end\">\n          <Count value={count} onChange={handleCountChange} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ms -> seconds\n// returns floored integer(to strip trailing digit ms)\nconst formatDelay = (timerDelay: number | null): number => {\n  return timerDelay === null ? 0 : Math.floor(timerDelay / 1000);\n};\n\n// seconds -> ms | null\nconst parseDelay = (timerDelay: number | string): number | null => {\n  const num = parseInt(timerDelay as string, 10);\n  return num === 0 ? null : num * 1000;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\ntype SwConfig = {\n  onUpdate: (registration: ServiceWorkerRegistration) => void;\n  onSuccess: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config: SwConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: SwConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: SwConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}